// <auto-generated />
using System;
using HBLoggingService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HBLoggingService.Migrations
{
    [DbContext(typeof(LoggingDbContext))]
    [Migration("20250825230116_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HBLoggingService.Models.ServerLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Dtg")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TotalErrors")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ServerLogs");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.CallBookConf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("LogConfigId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogConfigId");

                    b.ToTable("CallBookConfs");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.CallSign", b =>
                {
                    b.Property<string>("Call")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OperatorProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Call");

                    b.HasIndex("OperatorProfileId");

                    b.ToTable("CallSigns");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.DxClusterConf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("LogConfigId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(7300);

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogConfigId");

                    b.ToTable("DxClusterConfs");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.LogConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Dxcc")
                        .HasColumnType("integer");

                    b.Property<string>("GridSquare")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ProKey")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("LogConfig");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.OperatorProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperatorProfiles");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.Qso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BackedUp")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BackupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Call")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ContestId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Dxcc")
                        .HasColumnType("integer");

                    b.Property<decimal>("Freq")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("MyCall")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("QsoDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RstRcvd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("RstSent")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("Band");

                    b.HasIndex("Call");

                    b.HasIndex("Dxcc");

                    b.ToTable("Qsos");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.QsoDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("QsoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QsoId");

                    b.ToTable("QsoDetails");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.QsoQslInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("QslReceived")
                        .HasColumnType("boolean");

                    b.Property<bool>("QslSent")
                        .HasColumnType("boolean");

                    b.Property<string>("QslService")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("QsoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QslService");

                    b.HasIndex("QsoId");

                    b.ToTable("QsoQslInfos");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.RigCtlConf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("LogConfigId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("TunerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LogConfigId");

                    b.ToTable("RigCtlConfs");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.CallBookConf", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.LogConfig", "LogConfig")
                        .WithMany("Logbooks")
                        .HasForeignKey("LogConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogConfig");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.CallSign", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.OperatorProfile", null)
                        .WithMany("CallSigns")
                        .HasForeignKey("OperatorProfileId");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.DxClusterConf", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.LogConfig", "LogConfig")
                        .WithMany("DxClusters")
                        .HasForeignKey("LogConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogConfig");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.QsoDetail", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.Qso", "Qso")
                        .WithMany("Details")
                        .HasForeignKey("QsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qso");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.QsoQslInfo", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.Qso", "Qso")
                        .WithMany("QslInfo")
                        .HasForeignKey("QsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qso");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.RigCtlConf", b =>
                {
                    b.HasOne("HamBlocks.Library.Models.LogConfig", "LogConfig")
                        .WithMany("RigControls")
                        .HasForeignKey("LogConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogConfig");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.LogConfig", b =>
                {
                    b.Navigation("DxClusters");

                    b.Navigation("Logbooks");

                    b.Navigation("RigControls");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.OperatorProfile", b =>
                {
                    b.Navigation("CallSigns");
                });

            modelBuilder.Entity("HamBlocks.Library.Models.Qso", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("QslInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
